### --- *nix --- ###

cd()
{
	builtin cd $@
	ls
}

### --- Golang --- ###

# vg: is a vim opener for gofiles, the idea is that with go the application code and test code are in the same package
#     therefore, we can open both the application code and test code with one command.
vg()
{
	filename="$(echo $1 | sed 's/.go//g')"

	file="${filename}.go"
	testfile="${filename}_test.go"

	nvim -O $file $testfile
}

# gtouch: creates the correct file structure with the correct package name for application and test code given
#         a file name.
gtouch()
{
	filename="$(echo $1 | sed 's/.go//g')"

	file="${filename}.go"
	testfile="${filename}_test.go"

	package=$(echo ${PWD##*/} | sed 's/-//g')

	echo "package $package" >> $file  &&\
	echo "package $package" >> $testfile

	vg $filename
}


### --- Git --- ###
gb()
{
    if ! command -v fzf &> /dev/null
    then
        git branch
    else
        git branch | fzf
    fi
}

gbc()
{
    if ! command -v fzf &> /dev/null
    then
        git branch
    else
       git checkout $(git branch | fzf)
    fi
}

gr()
{
    local git_root
    git_root=$(git rev-parse --show-toplevel 2> /dev/null)

    if [[ -n "$git_root" ]]; then
        # If git_root is not empty, cd into the git root directory
        cd "$git_root" || return
    else
        # noop
    fi
}


### --- Diary --- ###
diary()
{
    DAY="$(date +'%a' | awk '{print tolower($0)}')"
    YEAR="$(date +'%Y')"
    MONTH="$(date +'%m')"
    TODAY="$(date +'%Y_%m_%d')"

    if [ ! -d $HOME/wiki/diary/$YEAR/$MONTH ];
    then
        mkdir -p $HOME/wiki/diary/$YEAR/$MONTH
    fi

    FILENAME=$HOME/wiki/diary/$YEAR/$MONTH/${DAY}_${TODAY}.md

    if [ ! -f $FILENAME ]
    then
        touch $FILENAME

        echo "# Diary: $(echo $DAY $TODAY | sed 's/_/ /g')\n" >> $FILENAME
        cat $HOME/wiki/templates/$(echo $WIKI_DIARY_TEMPLATE) | envsubst >> $FILENAME
    fi

    $EDITOR $FILENAME
}

### --- Journal --- ###
journal()
{
    DAY="$(date +'%a' | awk '{print tolower($0)}')"
    YEAR="$(date +'%Y')"
    MONTH="$(date +'%m')"
    TODAY="$(date +'%Y_%m_%d')"

    if [ ! -d $HOME/wiki/journal/$YEAR/$MONTH ];
    then
        mkdir -p $HOME/wiki/journal/$YEAR/$MONTH
    fi

    FILENAME=$HOME/wiki/journal/$YEAR/$MONTH/${DAY}_${TODAY}.md

    if [ ! -f $FILENAME ]
    then
        touch $FILENAME

        echo "# Journal: $(echo $DAY $TODAY | sed 's/_/ /g')\n" >> $FILENAME
        cat $HOME/wiki/templates/$(echo $WIKI_JOURNAL_TEMPLATE) | envsubst >> $FILENAME
    fi

    $EDITOR $FILENAME
}

### --- Trips --- ###
trip()
{
    if [ ! -d $HOME/wiki/trips ];
    then
        mkdir $HOME/wiki/trips
    fi

    FORMAT="$(echo $WIKI_CURRENT_TRIP | sed 's/ //g' | sed 's/,/_/g' |  awk '{print tolower($0)}')"
    FILENAME=$HOME/wiki/trips/$FORMAT.md

    if [ ! -f $FILENAME ]
    then
        touch $FILENAME

        echo "# Trip: $WIKI_CURRENT_TRIP $WIKI_CURRENT_TRIP_EMOJI \n" >> $FILENAME
        cat $HOME/wiki/templates/$(echo $WIKI_TRIP_TEMPLATE) | envsubst >> $FILENAME
    fi


    $EDITOR $FILENAME
}

### --- Location --- ###
loc()
{
    if [ ! -d $HOME/wiki/location];
    then
        mkdir $HOME/wiki/location
    fi

    YEAR="$(date +'%Y')"
    FILENAME=$HOME/wiki/location/$YEAR.md

    if [ ! -f $FILENAME ]
    then
        touch $FILENAME

        echo "# Location: $(echo $YEAR)\n" >> $FILENAME
        cat $HOME/wiki/templates/$(echo $WIKI_LOCATION_TEMPLATE) | envsubst >> $FILENAME
    fi

    $EDITOR $FILENAME
}

### --- Language --- ###
lang()
{
    DAY="$(date +'%a' | awk '{print tolower($0)}')"
    YEAR="$(date +'%Y')"
    MONTH="$(date +'%m')"
    TODAY="$(date +'%Y_%m_%d')"

    if [ ! -d $HOME/wiki/lang/$WIKI_LANG/$YEAR/$MONTH ];
    then
        mkdir -p $HOME/wiki/lang/$WIKI_LANG/$YEAR/$MONTH
    fi

    FILENAME=$HOME/wiki/lang/$WIKI_LANG/$YEAR/$MONTH/${DAY}_${TODAY}.md

    if [ ! -f $FILENAME ]
    then
        touch $FILENAME

        echo "# Lang Journal: $(echo $DAY $TODAY | sed 's/_/ /g')\n" >> $FILENAME
    fi

    $EDITOR $FILENAME
}

### --- Ping --- ###
pg()
{
    ping www.google.com
}

### --- Buylist --- ###
buylist()
{
    F=$HOME/wiki/finances/buylist.md

    if [ ! -f $F ]
    then
        touch $F
        echo "# Buylist ðŸ¤‘" > $F
    fi

    $EDITOR $F
}

### --- TODO --- ###
todo()
{
    if [ $# -eq 0 ]; then
        todo -w
    fi

    while [[ $# -gt 0 ]]; do
        case "$1" in
            -d)
                local template=$WIKI/templates/$WIKI_TODO_DAILY_TEMPLATE

                local date_format="%d_%m_%Y"
                local current_date=$(date +$date_format)

                local year=$(date +%Y)
                local month=$(date +%m)

                local directory_path=$WIKI/todo/daily/$year/$month
                mkdir -p $directory_path

                local file_path=$directory_path/$current_date.md
                if [ ! -f $file_path ]; then
                    touch $file_path

                    echo "# TODO DAILY: $current_date" >> $file_path
                    echo "" >> $file_path
                    cat $template | envsubst >> $file_path
                fi

                $EDITOR $file_path
                ;;
            -e)
                local template=$WIKI/templates/$WIKI_TODO_ENG_WEEKLY_TEMPLATE

                local year=$(date +%Y)

                local directory_path=$WIKI/todo/eng/weekly/$year
                mkdir -p $directory_path

                local week_number=$(date +%U)

                local file_path=$directory_path/$week_number.md

                if [ ! -f $file_path ]; then
                    touch $file_path

                    echo "# ðŸ¤– TODO ENG WEEKLY: $week_number" >> $file_path
                    echo "" >> $file_path
                    cat $template | envsubst >> $file_path
                fi

                $EDITOR $file_path
                ;;
            *)
                local template=$WIKI/templates/$WIKI_TODO_WEEKLY_TEMPLATE

                local year=$(date +%Y)

                local directory_path=$WIKI/todo/weekly/$year
                mkdir -p $directory_path

                local week_number=$(date +%U)

                local file_path=$directory_path/$week_number.md

                if [ ! -f $file_path ]; then
                    touch $file_path

                    echo "# ðŸ“’ TODO WEEKLY: $week_number" >> $file_path
                    echo "" >> $file_path
                    cat $template | envsubst >> $file_path
                fi

                $EDITOR $file_path
                ;;
        esac
        shift
    done
}

goals()
{
    local year=$(date +%Y)
    $EDITOR $HOME/wiki/planning/$year/goals.md
}

# Reinstates the current branch by pulling the latest changes from the origin.
gbpn()
{
  ## TODO: add emojis

  current_branch=$(git symbolic-ref --short HEAD 2>/dev/null || git rev-parse --short HEAD 2>/dev/null)
  echo "current_branch=$current_branch"

  default_branch=$(git symbolic-ref --short refs/remotes/origin/HEAD 2>/dev/null | sed 's@^refs/heads/@@' | sed 's/origin/\///g')
  echo "default_branch=$default_branch"

  echo "refreshing current from from default branch"

  git checkout $default_branch && echo "checkout out to $default_branch" && \
    git branch -D $current_branch && echo "deleted branch $current_branch" && \
    git pull && git fetch && echo "pulled & fetched latest from origin" && \
    git checkout $current_branch && echo "checked out to $current_branch"

  echo ""
  echo "Done"
}
